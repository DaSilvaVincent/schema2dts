// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateJSONSchemaTypes() with JSONSchema samples should work with array_of_things.json 1`] = `
"declare type Main = NonNullable<{
    fruits?: NonNullable<NonNullable<string>[]>;
    vegetables?: NonNullable<Definitions.Veggie[]>;
}>;
declare namespace Definitions {
    export type Veggie = NonNullable<{
        veggieName: NonNullable<string>;
        veggieLike: NonNullable<boolean>;
    }>;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json 1`] = `
"declare namespace API {
    export namespace GetAnomaly {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly anomalyId: Parameters.AnomalyId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getAnomalyResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type AnomalyId = Components.Parameters.AnomalyId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetFactory {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly factoryId: Parameters.FactoryId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getFactoryResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type FactoryId = Components.Parameters.FactoryId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetLine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly lineId: Parameters.LineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getLineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type LineId = Components.Parameters.LineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMachine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly machineId: Parameters.MachineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getMachineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type MachineId = Components.Parameters.MachineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMySelf {
        export type Output = Responses.$302;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $302 = Components.Responses.getMySelfResponse302<302>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOrganisation {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrganisationResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPredictionDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPredictionDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSensor {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sensorId: Parameters.SensorId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSensorResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SensorId = Components.Parameters.SensorId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSource {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sourceId: Parameters.SourceId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSourceResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SourceId = Components.Parameters.SourceId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetTrainingDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getTrainingDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetUser {
        export type Output = Responses.$200;
        export type Input = {
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserResponse200<200>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutUser {
        export type Body = Components.RequestBodies.PutUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putUserResponse201<201>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostOAuth2Token {
        export type Body = Components.RequestBodies.PostOAuth2TokenRequestBody;
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postOAuth2TokenResponse200<200>;
            export type $400 = Components.Responses.postOAuth2TokenResponse400<400>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostPasswordChangeRequest {
        export type Body = Components.RequestBodies.PostPasswordChangeRequestRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postPasswordChangeRequestResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostUser {
        export type Body = Components.RequestBodies.PostUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.postUserResponse201<201>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutPredictionsData {
        export type Body = Components.RequestBodies.PutPredictionsDataRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putPredictionsDataResponse201<201>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOAuth2Authorize {
        export type Output = Responses.$302;
        export type Input = {
            readonly responseType: Parameters.ResponseType;
            readonly clientId: Parameters.ClientId;
            readonly redirectUri?: Parameters.RedirectUri;
            readonly scope?: Parameters.Scope;
            readonly state: Parameters.State;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $302 = Components.Responses.getOAuth2AuthorizeResponse302<302>;
        }
        export namespace Parameters {
            export type ResponseType = Components.Parameters.ResponseType;
            export type ClientId = Components.Parameters.ClientId;
            export type RedirectUri = Components.Parameters.RedirectURI;
            export type Scope = Components.Parameters.Scope;
            export type State = Components.Parameters.State;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PutUserRequestBody = Components.Schemas.UserModel;
        export type PostOAuth2TokenRequestBody = Components.Schemas.TokenRequestBody | Components.Schemas.TokenRequestBody;
        export type PostPasswordChangeRequestRequestBody = Components.Schemas.RequestBodiespostPasswordChangeRequestRequestBodyBody0;
        export type PostUserRequestBody = Components.Schemas.UserModel;
        export type PutPredictionsDataRequestBody = Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody0 | Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody1;
    }
    export namespace Parameters {
        export type MlProject = \\"dalkia\\";
        export type ResponseType = Enums.ResponseType;
        export type AnomalyId = Components.Schemas.UUID;
        export type FactoryId = Components.Schemas.UUID;
        export type LineId = Components.Schemas.UUID;
        export type MachineId = Components.Schemas.UUID;
        export type OrganisationId = Components.Schemas.UUID;
        export type SensorId = Components.Schemas.UUID;
        export type SourceId = Components.Schemas.UUID;
        export type UserId = Components.Schemas.UUID;
        export type ClientId = NonNullable<string>;
        export type RedirectURI = NonNullable<string>;
        export type Scope = NonNullable<string>;
        export type State = NonNullable<string>;
        export type XSdkVersion = NonNullable<string>;
        export type XApplicationVersion = NonNullable<string>;
    }
    export namespace Responses {
        type getMySelfResponse302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type postPasswordChangeRequestResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type putPredictionsDataResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getOAuth2AuthorizeResponse302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getAnomalyResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AnomalyItem;
        };
        type getFactoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        type getLineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.LineItem;
        };
        type getMachineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.MachineItem;
        };
        type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        type getOrganisationResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        type getPredictionDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPredictionDatasetResponse200Body0;
        };
        type getSensorResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        type getSourceResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SourceItem;
        };
        type getTrainingDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetTrainingDatasetResponse200Body0;
        };
        type getUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        type putUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        type postOAuth2TokenResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2TokenResponse200Body0;
        };
        type postOAuth2TokenResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2TokenResponse400Body0;
        };
        type postUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
    }
    export namespace Schemas {
        export type UserModel = NonNullable<{
            id?: Components.Schemas.UUID;
            roles?: NonNullable<Components.Schemas.Role[]>;
            password?: NonNullable<string>;
            organisationsIds?: NonNullable<Components.Schemas.UUID[]>;
            data: Components.Schemas.UserData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type TokenRequestBody = Components.Schemas.PasswordRequestBody | Components.Schemas.AuthorizationCodeRequestBody | Components.Schemas.ClientCredentialsRequestBody | Components.Schemas.RefreshTokenRequestBody | Components.Schemas.VerifyTokenRequestBody | Components.Schemas.PasswordChangeBody;
        export type RequestBodiespostPasswordChangeRequestRequestBodyBody0 = NonNullable<{
            email: NonNullable<string>;
        }>;
        export type RequestBodiesputPredictionsDataRequestBodyBody0 = NonNullable<{
            [pattern: string]: unknown;
        }>;
        export type RequestBodiesputPredictionsDataRequestBodyBody1 = NonNullable<string>;
        export type UUID = NonNullable<string>;
        export type AnomalyItem = NonNullable<{
            item: Components.Schemas.UUID;
            anomalies: Components.Schemas.AnomalyModelHash;
        }>;
        export type FactoryItem = NonNullable<{
            item: Components.Schemas.UUID;
            factories: Components.Schemas.FactoryModelHash;
        }>;
        export type LineItem = NonNullable<{
            item: Components.Schemas.UUID;
            lines: Components.Schemas.LineModelHash;
        }>;
        export type MachineItem = NonNullable<{
            item: Components.Schemas.UUID;
            machines: Components.Schemas.MachineModelHash;
        }>;
        export type ResponsesgetOpenAPIResponse200Body0 = NonNullable<{}>;
        export type OrganisationItem = NonNullable<{
            item: Components.Schemas.UUID;
            organisations: Components.Schemas.OrganisationModelHash;
        }>;
        export type ResponsesgetPredictionDatasetResponse200Body0 = NonNullable<string>;
        export type SensorItem = NonNullable<{
            item: Components.Schemas.UUID;
            sensors: Components.Schemas.SensorModelHash;
        }>;
        export type SourceItem = NonNullable<{
            item: Components.Schemas.UUID;
            sources: Components.Schemas.SourceModelHash;
        }>;
        export type ResponsesgetTrainingDatasetResponse200Body0 = NonNullable<string>;
        export type UserItem = NonNullable<{
            item: Components.Schemas.UUID;
            users: Components.Schemas.UserModelHash;
        }>;
        export type ResponsespostOAuth2TokenResponse200Body0 = NonNullable<{
            access_token: NonNullable<string>;
            token_type: Enums.TokenType;
            expires_in?: NonNullable<number>;
            refresh_token?: NonNullable<string>;
        }>;
        export type ResponsespostOAuth2TokenResponse400Body0 = NonNullable<{
            error: Enums.Error;
            error_description?: NonNullable<string>;
            error_uri?: NonNullable<string>;
        }>;
        export type ResponsesgetPingResponse200Body0 = NonNullable<{
            pong?: \\"pong\\";
        }>;
        export type Role = Enums.Role;
        export type UserData = NonNullable<{
            email: NonNullable<string>;
            name: NonNullable<string>;
            givenName?: NonNullable<string>;
            familyName?: NonNullable<string>;
            phone?: NonNullable<string>;
            birthDay?: NonNullable<string>;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        }>;
        export type Date = NonNullable<string>;
        export type PasswordRequestBody = NonNullable<{
            grant_type: \\"password\\";
            username: NonNullable<string>;
            password: NonNullable<string>;
            scope?: NonNullable<string>;
        }>;
        export type AuthorizationCodeRequestBody = NonNullable<{
            grant_type: \\"authorization_code\\";
            code?: NonNullable<string>;
            client_id?: NonNullable<string>;
            redirect_uri?: NonNullable<string>;
        }>;
        export type ClientCredentialsRequestBody = NonNullable<{
            grant_type: \\"client_credentials\\";
            scope?: NonNullable<string>;
        }>;
        export type RefreshTokenRequestBody = NonNullable<{
            grant_type: \\"refresh_token\\";
            refresh_token: NonNullable<string>;
            scope?: NonNullable<string>;
        }>;
        export type VerifyTokenRequestBody = NonNullable<{
            grant_type: \\"verify_token\\";
            verify_token: NonNullable<string>;
        }>;
        export type PasswordChangeBody = NonNullable<{
            grant_type: \\"password_change\\";
            token: NonNullable<string>;
            new_password: NonNullable<string>;
        }>;
        export type AnomalyModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.AnomalyModel;
        }>;
        export type FactoryModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.FactoryModel;
        }>;
        export type LineModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.LineModel;
        }>;
        export type MachineModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.MachineModel;
        }>;
        export type OrganisationModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.OrganisationModel;
        }>;
        export type SensorModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.SensorModel;
        }>;
        export type SourceModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.SourceModel;
        }>;
        export type UserModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.UserModel;
        }>;
        export type Locale = NonNullable<string>;
        export type TimeZone = NonNullable<string>;
        export type AnomalyModel = NonNullable<{
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            linesIds?: NonNullable<Components.Schemas.UUID[]>;
            machinesIds?: NonNullable<Components.Schemas.UUID[]>;
            sensorsIds?: NonNullable<Components.Schemas.UUID[]>;
            data: Components.Schemas.AnomalyData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            archivedAt?: Components.Schemas.Date;
        }>;
        export type FactoryModel = NonNullable<{
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            data: Components.Schemas.FactoryData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type LineModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.LineData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type MachineModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.MachineData;
            powerState: Enums.PowerState;
            operatingState: Enums.OperatingState;
            healthState: Enums.HealthState;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type OrganisationModel = NonNullable<{
            id?: Components.Schemas.UUID;
            factoriesIds?: NonNullable<Components.Schemas.UUID[]>;
            data: Components.Schemas.OrganisationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type SensorModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SensorData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type SourceModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SourceData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type AnomalyData = NonNullable<{
            assignedUser?: Components.Schemas.UUID;
            status: Enums.Status;
            archived: NonNullable<boolean>;
            priority: Enums.Priority;
            severity: Enums.Severity;
        }>;
        export type FactoryData = NonNullable<{
            externalId?: NonNullable<string>;
            name: NonNullable<string>;
        }>;
        export type LineData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            factoryId: Components.Schemas.UUID;
            machinesIds?: NonNullable<Components.Schemas.UUID[]>;
            machinesTree?: NonNullable<{}>;
            machineId: unknown;
            settings: unknown;
        }>;
        export type MachineData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            factoryId: Components.Schemas.UUID;
        }>;
        export type OrganisationData = NonNullable<{
            name: NonNullable<string>;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        }>;
        export type SensorData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            factoryId: Components.Schemas.UUID;
            machineId: Components.Schemas.UUID;
            settings: NonNullable<{
                type?: \\"opc-ua\\";
                uri?: NonNullable<string>;
            }>;
        }>;
        export type SourceData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            settings: NonNullable<{
                type?: \\"opc-ua\\";
                uri?: NonNullable<string>;
            }>;
        }>;
    }
}
declare namespace Enums {
    export enum ResponseType {
        Code = \\"code\\",
        Token = \\"token\\"
    }
    export enum TokenType {
        Bearer = \\"bearer\\",
        Mac = \\"mac\\",
        Unknown = \\"\\\\uD83D\\\\uDC95-\\\\u2705\\"
    }
    export enum Error {
        InvalidRequest = \\"invalid_request\\",
        InvalidClient = \\"invalid_client\\",
        InvalidGrant = \\"invalid_grant\\",
        UnauthorizedClient = \\"unauthorized_client\\",
        UnsupportedGrantType = \\"unsupported_grant_type\\",
        InvalidScope = \\"invalid_scope\\"
    }
    export enum Role {
        Admin = \\"admin\\",
        User = \\"user\\",
        Candidate = \\"candidate\\"
    }
    export enum PowerState {
        Unknown = \\"unknown\\",
        On = \\"on\\",
        Off = \\"off\\"
    }
    export enum OperatingState {
        Unknown = \\"unknown\\",
        Normal = \\"normal\\",
        Stopped = \\"stopped\\",
        Idle = \\"idle\\"
    }
    export enum HealthState {
        Unknown = \\"unknown\\",
        Good = \\"good\\",
        Faulty = \\"faulty\\",
        Erroring = \\"erroring\\"
    }
    export enum Status {
        Open = \\"open\\",
        Discarded = \\"discarded\\",
        Assigned = \\"assigned\\",
        Fixed = \\"fixed\\",
        Closed = \\"closed\\"
    }
    export enum Priority {
        NotSet = \\"not_set\\",
        Urgent = \\"urgent\\",
        Important = \\"important\\",
        Secondary = \\"secondary\\"
    }
    export enum Severity {
        NotSet = \\"not_set\\",
        Critical = \\"critical\\",
        Major = \\"major\\",
        Moderate = \\"moderate\\",
        Minor = \\"minor\\",
        Cosmetic = \\"cosmetic\\"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace API {
    export namespace GetAnomaly {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly anomalyId: Parameters.AnomalyId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getAnomalyResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type AnomalyId = Components.Parameters.AnomalyId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetFactory {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly factoryId: Parameters.FactoryId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getFactoryResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type FactoryId = Components.Parameters.FactoryId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetLine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly lineId: Parameters.LineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getLineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type LineId = Components.Parameters.LineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMachine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly machineId: Parameters.MachineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getMachineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type MachineId = Components.Parameters.MachineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMySelf {
        export type Output = unknown;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOrganisation {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrganisationResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPredictionDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPredictionDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSensor {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sensorId: Parameters.SensorId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSensorResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SensorId = Components.Parameters.SensorId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSource {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sourceId: Parameters.SourceId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSourceResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SourceId = Components.Parameters.SourceId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetTrainingDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getTrainingDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetUser {
        export type Output = Responses.$200;
        export type Input = {
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserResponse200<200>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutUser {
        export type Body = Components.RequestBodies.PutUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putUserResponse201<201>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostOAuth2Token {
        export type Body = Components.RequestBodies.PostOAuth2TokenRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postOAuth2TokenResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostPasswordChangeRequest {
        export type Body = Components.RequestBodies.PostPasswordChangeRequestRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postPasswordChangeRequestResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostUser {
        export type Body = Components.RequestBodies.PostUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.postUserResponse201<201>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutPredictionsData {
        export type Body = Components.RequestBodies.PutPredictionsDataRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putPredictionsDataResponse201<201>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOAuth2Authorize {
        export type Output = unknown;
        export type Input = {
            readonly responseType: Parameters.ResponseType;
            readonly clientId: Parameters.ClientId;
            readonly redirectUri?: Parameters.RedirectUri;
            readonly scope?: Parameters.Scope;
            readonly state: Parameters.State;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Parameters {
            export type ResponseType = Components.Parameters.ResponseType;
            export type ClientId = Components.Parameters.ClientId;
            export type RedirectUri = Components.Parameters.RedirectURI;
            export type Scope = Components.Parameters.Scope;
            export type State = Components.Parameters.State;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PutUserRequestBody = Components.Schemas.UserModel;
        export type PostOAuth2TokenRequestBody = Components.Schemas.TokenRequestBody | Components.Schemas.TokenRequestBody;
        export type PostPasswordChangeRequestRequestBody = Components.Schemas.RequestBodiespostPasswordChangeRequestRequestBodyBody0;
        export type PostUserRequestBody = Components.Schemas.UserModel;
        export type PutPredictionsDataRequestBody = Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody0 | Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody1;
    }
    export namespace Parameters {
        export type MlProject = \\"dalkia\\";
        export type ResponseType = Enums.ResponseType;
        export type AnomalyId = Components.Schemas.UUID;
        export type FactoryId = Components.Schemas.UUID;
        export type LineId = Components.Schemas.UUID;
        export type MachineId = Components.Schemas.UUID;
        export type OrganisationId = Components.Schemas.UUID;
        export type SensorId = Components.Schemas.UUID;
        export type SourceId = Components.Schemas.UUID;
        export type UserId = Components.Schemas.UUID;
        export type ClientId = NonNullable<string>;
        export type RedirectURI = NonNullable<string>;
        export type Scope = NonNullable<string>;
        export type State = NonNullable<string>;
        export type XSdkVersion = NonNullable<string>;
        export type XApplicationVersion = NonNullable<string>;
    }
    export namespace Responses {
        type postPasswordChangeRequestResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type putPredictionsDataResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getAnomalyResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AnomalyItem;
        };
        type getFactoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        type getLineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.LineItem;
        };
        type getMachineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.MachineItem;
        };
        type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        type getOrganisationResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        type getPredictionDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPredictionDatasetResponse200Body0;
        };
        type getSensorResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        type getSourceResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SourceItem;
        };
        type getTrainingDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetTrainingDatasetResponse200Body0;
        };
        type getUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        type putUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        type postOAuth2TokenResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2TokenResponse200Body0;
        };
        type postUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
    }
    export namespace Schemas {
        export type UserModel = NonNullable<{
            id?: Components.Schemas.UUID;
            roles?: NonNullable<Components.Schemas.Role[]>;
            password?: NonNullable<string>;
            organisationsIds?: NonNullable<Components.Schemas.UUID[]>;
            data: Components.Schemas.UserData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type TokenRequestBody = Components.Schemas.PasswordRequestBody | Components.Schemas.AuthorizationCodeRequestBody | Components.Schemas.ClientCredentialsRequestBody | Components.Schemas.RefreshTokenRequestBody | Components.Schemas.VerifyTokenRequestBody | Components.Schemas.PasswordChangeBody;
        export type RequestBodiespostPasswordChangeRequestRequestBodyBody0 = NonNullable<{
            email: NonNullable<string>;
        }>;
        export type RequestBodiesputPredictionsDataRequestBodyBody0 = NonNullable<{
            [pattern: string]: unknown;
        }>;
        export type RequestBodiesputPredictionsDataRequestBodyBody1 = NonNullable<string>;
        export type UUID = NonNullable<string> & NonNullable<{
            _type?: \\"UUID\\";
        }>;
        export type AnomalyItem = NonNullable<{
            item: Components.Schemas.UUID;
            anomalies: Components.Schemas.AnomalyModelHash;
        }>;
        export type FactoryItem = NonNullable<{
            item: Components.Schemas.UUID;
            factories: Components.Schemas.FactoryModelHash;
        }>;
        export type LineItem = NonNullable<{
            item: Components.Schemas.UUID;
            lines: Components.Schemas.LineModelHash;
        }>;
        export type MachineItem = NonNullable<{
            item: Components.Schemas.UUID;
            machines: Components.Schemas.MachineModelHash;
        }>;
        export type ResponsesgetOpenAPIResponse200Body0 = NonNullable<{}>;
        export type OrganisationItem = NonNullable<{
            item: Components.Schemas.UUID;
            organisations: Components.Schemas.OrganisationModelHash;
        }>;
        export type ResponsesgetPredictionDatasetResponse200Body0 = NonNullable<string>;
        export type SensorItem = NonNullable<{
            item: Components.Schemas.UUID;
            sensors: Components.Schemas.SensorModelHash;
        }>;
        export type SourceItem = NonNullable<{
            item: Components.Schemas.UUID;
            sources: Components.Schemas.SourceModelHash;
        }>;
        export type ResponsesgetTrainingDatasetResponse200Body0 = NonNullable<string>;
        export type UserItem = NonNullable<{
            item: Components.Schemas.UUID;
            users: Components.Schemas.UserModelHash;
        }>;
        export type ResponsespostOAuth2TokenResponse200Body0 = NonNullable<{
            access_token: NonNullable<string>;
            token_type: Enums.TokenType;
            expires_in?: NonNullable<number>;
            refresh_token?: NonNullable<string>;
        }>;
        export type ResponsesgetPingResponse200Body0 = NonNullable<{
            pong?: \\"pong\\";
        }>;
        export type Role = Enums.Role & NonNullable<{
            _type?: \\"Role\\";
        }>;
        export type UserData = NonNullable<{
            email: NonNullable<string>;
            name: NonNullable<string>;
            givenName?: NonNullable<string>;
            familyName?: NonNullable<string>;
            phone?: NonNullable<string>;
            birthDay?: NonNullable<string>;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        }>;
        export type Date = NonNullable<string> & NonNullable<{
            _type?: \\"Date\\";
        }>;
        export type PasswordRequestBody = NonNullable<{
            grant_type: \\"password\\";
            username: NonNullable<string>;
            password: NonNullable<string>;
            scope?: NonNullable<string>;
        }>;
        export type AuthorizationCodeRequestBody = NonNullable<{
            grant_type: \\"authorization_code\\";
            code?: NonNullable<string>;
            client_id?: NonNullable<string>;
            redirect_uri?: NonNullable<string>;
        }>;
        export type ClientCredentialsRequestBody = NonNullable<{
            grant_type: \\"client_credentials\\";
            scope?: NonNullable<string>;
        }>;
        export type RefreshTokenRequestBody = NonNullable<{
            grant_type: \\"refresh_token\\";
            refresh_token: NonNullable<string>;
            scope?: NonNullable<string>;
        }>;
        export type VerifyTokenRequestBody = NonNullable<{
            grant_type: \\"verify_token\\";
            verify_token: NonNullable<string>;
        }>;
        export type PasswordChangeBody = NonNullable<{
            grant_type: \\"password_change\\";
            token: NonNullable<string>;
            new_password: NonNullable<string>;
        }>;
        export type AnomalyModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.AnomalyModel;
        }>;
        export type FactoryModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.FactoryModel;
        }>;
        export type LineModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.LineModel;
        }>;
        export type MachineModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.MachineModel;
        }>;
        export type OrganisationModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.OrganisationModel;
        }>;
        export type SensorModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.SensorModel;
        }>;
        export type SourceModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.SourceModel;
        }>;
        export type UserModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.UserModel;
        }>;
        export type Locale = NonNullable<string> & NonNullable<{
            _type?: \\"Locale\\";
        }>;
        export type TimeZone = NonNullable<string> & NonNullable<{
            _type?: \\"TimeZone\\";
        }>;
        export type AnomalyModel = NonNullable<{
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            linesIds?: NonNullable<Components.Schemas.UUID[]>;
            machinesIds?: NonNullable<Components.Schemas.UUID[]>;
            sensorsIds?: NonNullable<Components.Schemas.UUID[]>;
            data: Components.Schemas.AnomalyData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            archivedAt?: Components.Schemas.Date;
        }>;
        export type FactoryModel = NonNullable<{
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            data: Components.Schemas.FactoryData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type LineModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.LineData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type MachineModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.MachineData;
            powerState: Enums.PowerState;
            operatingState: Enums.OperatingState;
            healthState: Enums.HealthState;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type OrganisationModel = NonNullable<{
            id?: Components.Schemas.UUID;
            factoriesIds?: NonNullable<Components.Schemas.UUID[]>;
            data: Components.Schemas.OrganisationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type SensorModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SensorData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type SourceModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SourceData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type AnomalyData = NonNullable<{
            assignedUser?: Components.Schemas.UUID;
            status: Enums.Status;
            archived: NonNullable<boolean>;
            priority: Enums.Priority;
            severity: Enums.Severity;
        }>;
        export type FactoryData = NonNullable<{
            externalId?: NonNullable<string>;
            name: NonNullable<string>;
        }>;
        export type LineData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            factoryId: Components.Schemas.UUID;
            machinesIds?: NonNullable<Components.Schemas.UUID[]>;
            machinesTree?: NonNullable<{}>;
            machineId: unknown;
            settings: unknown;
        }>;
        export type MachineData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            factoryId: Components.Schemas.UUID;
        }>;
        export type OrganisationData = NonNullable<{
            name: NonNullable<string>;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        }>;
        export type SensorData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            factoryId: Components.Schemas.UUID;
            machineId: Components.Schemas.UUID;
            settings: NonNullable<{
                type?: \\"opc-ua\\";
                uri?: NonNullable<string>;
            }>;
        }>;
        export type SourceData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            settings: NonNullable<{
                type?: \\"opc-ua\\";
                uri?: NonNullable<string>;
            }>;
        }>;
    }
}
declare namespace Enums {
    export enum ResponseType {
        Code = \\"code\\",
        Token = \\"token\\"
    }
    export enum TokenType {
        Bearer = \\"bearer\\",
        Mac = \\"mac\\",
        Unknown = \\"\\\\uD83D\\\\uDC95-\\\\u2705\\"
    }
    export enum Role {
        Admin = \\"admin\\",
        User = \\"user\\",
        Candidate = \\"candidate\\"
    }
    export enum PowerState {
        Unknown = \\"unknown\\",
        On = \\"on\\",
        Off = \\"off\\"
    }
    export enum OperatingState {
        Unknown = \\"unknown\\",
        Normal = \\"normal\\",
        Stopped = \\"stopped\\",
        Idle = \\"idle\\"
    }
    export enum HealthState {
        Unknown = \\"unknown\\",
        Good = \\"good\\",
        Faulty = \\"faulty\\",
        Erroring = \\"erroring\\"
    }
    export enum Status {
        Open = \\"open\\",
        Discarded = \\"discarded\\",
        Assigned = \\"assigned\\",
        Fixed = \\"fixed\\",
        Closed = \\"closed\\"
    }
    export enum Priority {
        NotSet = \\"not_set\\",
        Urgent = \\"urgent\\",
        Important = \\"important\\",
        Secondary = \\"secondary\\"
    }
    export enum Severity {
        NotSet = \\"not_set\\",
        Critical = \\"critical\\",
        Major = \\"major\\",
        Moderate = \\"moderate\\",
        Minor = \\"minor\\",
        Cosmetic = \\"cosmetic\\"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json and generateUnusedSchemas option to true 1`] = `
"declare namespace AnotherAPI {
    export namespace GetAnomaly {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly anomalyId: Parameters.AnomalyId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getAnomalyResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type AnomalyId = Components.Parameters.AnomalyId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetFactory {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly factoryId: Parameters.FactoryId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getFactoryResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type FactoryId = Components.Parameters.FactoryId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetLine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly lineId: Parameters.LineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getLineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type LineId = Components.Parameters.LineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMachine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly machineId: Parameters.MachineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getMachineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type MachineId = Components.Parameters.MachineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMySelf {
        export type Output = Responses.$302;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $302 = Components.Responses.getMySelfResponse302<302>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOrganisation {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrganisationResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPredictionDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPredictionDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSensor {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sensorId: Parameters.SensorId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSensorResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SensorId = Components.Parameters.SensorId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSource {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sourceId: Parameters.SourceId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSourceResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SourceId = Components.Parameters.SourceId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetTrainingDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getTrainingDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetUser {
        export type Output = Responses.$200;
        export type Input = {
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserResponse200<200>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutUser {
        export type Body = Components.RequestBodies.PutUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putUserResponse201<201>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostOAuth2Token {
        export type Body = Components.RequestBodies.PostOAuth2TokenRequestBody;
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postOAuth2TokenResponse200<200>;
            export type $400 = Components.Responses.postOAuth2TokenResponse400<400>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostPasswordChangeRequest {
        export type Body = Components.RequestBodies.PostPasswordChangeRequestRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postPasswordChangeRequestResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostUser {
        export type Body = Components.RequestBodies.PostUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.postUserResponse201<201>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutPredictionsData {
        export type Body = Components.RequestBodies.PutPredictionsDataRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putPredictionsDataResponse201<201>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOAuth2Authorize {
        export type Output = Responses.$302;
        export type Input = {
            readonly responseType: Parameters.ResponseType;
            readonly clientId: Parameters.ClientId;
            readonly redirectUri?: Parameters.RedirectUri;
            readonly scope?: Parameters.Scope;
            readonly state: Parameters.State;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $302 = Components.Responses.getOAuth2AuthorizeResponse302<302>;
        }
        export namespace Parameters {
            export type ResponseType = Components.Parameters.ResponseType;
            export type ClientId = Components.Parameters.ClientId;
            export type RedirectUri = Components.Parameters.RedirectURI;
            export type Scope = Components.Parameters.Scope;
            export type State = Components.Parameters.State;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PutUserRequestBody = Components.Schemas.UserModel;
        export type PostOAuth2TokenRequestBody = Components.Schemas.TokenRequestBody | Components.Schemas.TokenRequestBody;
        export type PostPasswordChangeRequestRequestBody = Components.Schemas.RequestBodiespostPasswordChangeRequestRequestBodyBody0;
        export type PostUserRequestBody = Components.Schemas.UserModel;
        export type PutPredictionsDataRequestBody = Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody0 | Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody1;
    }
    export namespace Parameters {
        export type MlProject = \\"dalkia\\";
        export type ResponseType = Enums.ResponseType;
        export type AnomalyId = Components.Schemas.UUID;
        export type FactoryId = Components.Schemas.UUID;
        export type LineId = Components.Schemas.UUID;
        export type MachineId = Components.Schemas.UUID;
        export type OrganisationId = Components.Schemas.UUID;
        export type SensorId = Components.Schemas.UUID;
        export type SourceId = Components.Schemas.UUID;
        export type UserId = Components.Schemas.UUID;
        export type ClientId = NonNullable<string>;
        export type RedirectURI = NonNullable<string>;
        export type Scope = NonNullable<string>;
        export type State = NonNullable<string>;
        export type XSdkVersion = NonNullable<string>;
        export type XApplicationVersion = NonNullable<string>;
    }
    export namespace Responses {
        type getMySelfResponse302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type postPasswordChangeRequestResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type putPredictionsDataResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getOAuth2AuthorizeResponse302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getAnomalyResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AnomalyItem;
        };
        type getFactoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        type getLineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.LineItem;
        };
        type getMachineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.MachineItem;
        };
        type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        type getOrganisationResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        type getPredictionDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPredictionDatasetResponse200Body0;
        };
        type getSensorResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        type getSourceResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SourceItem;
        };
        type getTrainingDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetTrainingDatasetResponse200Body0;
        };
        type getUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        type putUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        type postOAuth2TokenResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2TokenResponse200Body0;
        };
        type postOAuth2TokenResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2TokenResponse400Body0;
        };
        type postUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
    }
    export namespace Schemas {
        export type AnomalyData = NonNullable<{
            assignedUser?: Components.Schemas.UUID;
            status: Enums.Status;
            archived: NonNullable<boolean>;
            priority: Enums.Priority;
            severity: Enums.Severity;
        }>;
        export type AnomalyModel = NonNullable<{
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            linesIds?: NonNullable<Components.Schemas.UUID[]>;
            machinesIds?: NonNullable<Components.Schemas.UUID[]>;
            sensorsIds?: NonNullable<Components.Schemas.UUID[]>;
            data: Components.Schemas.AnomalyData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            archivedAt?: Components.Schemas.Date;
        }>;
        export type AnomalyModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.AnomalyModel;
        }>;
        export type AnomalyItem = NonNullable<{
            item: Components.Schemas.UUID;
            anomalies: Components.Schemas.AnomalyModelHash;
        }>;
        export type AnomaliesItems = NonNullable<{
            items: NonNullable<Components.Schemas.UUID[]>;
            anomalies: Components.Schemas.AnomalyModelHash;
        }>;
        export type FactoryData = NonNullable<{
            externalId?: NonNullable<string>;
            name: NonNullable<string>;
        }>;
        export type FactoryModel = NonNullable<{
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            data: Components.Schemas.FactoryData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type FactoryModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.FactoryModel;
        }>;
        export type FactoryItem = NonNullable<{
            item: Components.Schemas.UUID;
            factories: Components.Schemas.FactoryModelHash;
        }>;
        export type FactoriesItems = NonNullable<{
            items: NonNullable<Components.Schemas.UUID[]>;
            factories: Components.Schemas.FactoryModelHash;
        }>;
        export type LineData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            factoryId: Components.Schemas.UUID;
            machinesIds?: NonNullable<Components.Schemas.UUID[]>;
            machinesTree?: NonNullable<{}>;
            machineId: unknown;
            settings: unknown;
        }>;
        export type LineModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.LineData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type LineModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.LineModel;
        }>;
        export type LineItem = NonNullable<{
            item: Components.Schemas.UUID;
            lines: Components.Schemas.LineModelHash;
        }>;
        export type LinesItems = NonNullable<{
            items: NonNullable<Components.Schemas.UUID[]>;
            lines: Components.Schemas.LineModelHash;
        }>;
        export type MachineData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            factoryId: Components.Schemas.UUID;
        }>;
        export type MachineModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.MachineData;
            powerState: Enums.PowerState;
            operatingState: Enums.OperatingState;
            healthState: Enums.HealthState;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type MachineModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.MachineModel;
        }>;
        export type MachineItem = NonNullable<{
            item: Components.Schemas.UUID;
            machines: Components.Schemas.MachineModelHash;
        }>;
        export type MachinesItems = NonNullable<{
            items: NonNullable<Components.Schemas.UUID[]>;
            machines: Components.Schemas.MachineModelHash;
        }>;
        export type OrganisationData = NonNullable<{
            name: NonNullable<string>;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        }>;
        export type OrganisationModel = NonNullable<{
            id?: Components.Schemas.UUID;
            factoriesIds?: NonNullable<Components.Schemas.UUID[]>;
            data: Components.Schemas.OrganisationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type OrganisationModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.OrganisationModel;
        }>;
        export type OrganisationItem = NonNullable<{
            item: Components.Schemas.UUID;
            organisations: Components.Schemas.OrganisationModelHash;
        }>;
        export type OrganisationsItems = NonNullable<{
            items: NonNullable<Components.Schemas.UUID[]>;
            organisations: Components.Schemas.OrganisationModelHash;
        }>;
        export type SensorData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            factoryId: Components.Schemas.UUID;
            machineId: Components.Schemas.UUID;
            settings: NonNullable<{
                type?: \\"opc-ua\\";
                uri?: NonNullable<string>;
            }>;
        }>;
        export type SensorModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SensorData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type SensorModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.SensorModel;
        }>;
        export type SensorItem = NonNullable<{
            item: Components.Schemas.UUID;
            sensors: Components.Schemas.SensorModelHash;
        }>;
        export type SensorsItems = NonNullable<{
            items: NonNullable<Components.Schemas.UUID[]>;
            sensors: Components.Schemas.SensorModelHash;
        }>;
        export type SourceData = NonNullable<{
            name: NonNullable<string>;
            externalId?: NonNullable<string>;
            settings: NonNullable<{
                type?: \\"opc-ua\\";
                uri?: NonNullable<string>;
            }>;
        }>;
        export type SourceModel = NonNullable<{
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SourceData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type SourceModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.SourceModel;
        }>;
        export type SourceItem = NonNullable<{
            item: Components.Schemas.UUID;
            sources: Components.Schemas.SourceModelHash;
        }>;
        export type SourcesItems = NonNullable<{
            items: NonNullable<Components.Schemas.UUID[]>;
            sources: Components.Schemas.SourceModelHash;
        }>;
        export type Locale = NonNullable<string>;
        export type TimeZone = NonNullable<string>;
        export type UUID = NonNullable<string>;
        export type Date = NonNullable<string>;
        export type Role = Enums.Role;
        export type UserData = NonNullable<{
            email: NonNullable<string>;
            name: NonNullable<string>;
            givenName?: NonNullable<string>;
            familyName?: NonNullable<string>;
            phone?: NonNullable<string>;
            birthDay?: NonNullable<string>;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        }>;
        export type UserModel = NonNullable<{
            id?: Components.Schemas.UUID;
            roles?: NonNullable<Components.Schemas.Role[]>;
            password?: NonNullable<string>;
            organisationsIds?: NonNullable<Components.Schemas.UUID[]>;
            data: Components.Schemas.UserData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        }>;
        export type UserModelHash = NonNullable<{
            [pattern: string]: Components.Schemas.UserModel;
        }>;
        export type UserItem = NonNullable<{
            item: Components.Schemas.UUID;
            users: Components.Schemas.UserModelHash;
        }>;
        export type UsersItems = NonNullable<{
            items: NonNullable<Components.Schemas.UUID[]>;
            users: Components.Schemas.UserModelHash;
        }>;
        export type AuthorizationCodeRequestBody = NonNullable<{
            grant_type: \\"authorization_code\\";
            code?: NonNullable<string>;
            client_id?: NonNullable<string>;
            redirect_uri?: NonNullable<string>;
        }>;
        export type PasswordRequestBody = NonNullable<{
            grant_type: \\"password\\";
            username: NonNullable<string>;
            password: NonNullable<string>;
            scope?: NonNullable<string>;
        }>;
        export type ClientCredentialsRequestBody = NonNullable<{
            grant_type: \\"client_credentials\\";
            scope?: NonNullable<string>;
        }>;
        export type RefreshTokenRequestBody = NonNullable<{
            grant_type: \\"refresh_token\\";
            refresh_token: NonNullable<string>;
            scope?: NonNullable<string>;
        }>;
        export type VerifyTokenRequestBody = NonNullable<{
            grant_type: \\"verify_token\\";
            verify_token: NonNullable<string>;
        }>;
        export type PasswordChangeBody = NonNullable<{
            grant_type: \\"password_change\\";
            token: NonNullable<string>;
            new_password: NonNullable<string>;
        }>;
        export type TokenRequestBody = Components.Schemas.PasswordRequestBody | Components.Schemas.AuthorizationCodeRequestBody | Components.Schemas.ClientCredentialsRequestBody | Components.Schemas.RefreshTokenRequestBody | Components.Schemas.VerifyTokenRequestBody | Components.Schemas.PasswordChangeBody;
        export type UnusedSchema = NonNullable<{
            foo: NonNullable<string>;
            bar?: NonNullable<string>;
        }>;
        export type RequestBodiespostPasswordChangeRequestRequestBodyBody0 = NonNullable<{
            email: NonNullable<string>;
        }>;
        export type RequestBodiesputPredictionsDataRequestBodyBody0 = NonNullable<{
            [pattern: string]: unknown;
        }>;
        export type RequestBodiesputPredictionsDataRequestBodyBody1 = NonNullable<string>;
        export type ResponsesgetOpenAPIResponse200Body0 = NonNullable<{}>;
        export type ResponsesgetPredictionDatasetResponse200Body0 = NonNullable<string>;
        export type ResponsesgetTrainingDatasetResponse200Body0 = NonNullable<string>;
        export type ResponsespostOAuth2TokenResponse200Body0 = NonNullable<{
            access_token: NonNullable<string>;
            token_type: Enums.TokenType;
            expires_in?: NonNullable<number>;
            refresh_token?: NonNullable<string>;
        }>;
        export type ResponsespostOAuth2TokenResponse400Body0 = NonNullable<{
            error: Enums.Error;
            error_description?: NonNullable<string>;
            error_uri?: NonNullable<string>;
        }>;
        export type ResponsesgetPingResponse200Body0 = NonNullable<{
            pong?: \\"pong\\";
        }>;
    }
}
declare namespace Enums {
    export enum ResponseType {
        Code = \\"code\\",
        Token = \\"token\\"
    }
    export enum Status {
        Open = \\"open\\",
        Discarded = \\"discarded\\",
        Assigned = \\"assigned\\",
        Fixed = \\"fixed\\",
        Closed = \\"closed\\"
    }
    export enum Priority {
        NotSet = \\"not_set\\",
        Urgent = \\"urgent\\",
        Important = \\"important\\",
        Secondary = \\"secondary\\"
    }
    export enum Severity {
        NotSet = \\"not_set\\",
        Critical = \\"critical\\",
        Major = \\"major\\",
        Moderate = \\"moderate\\",
        Minor = \\"minor\\",
        Cosmetic = \\"cosmetic\\"
    }
    export enum PowerState {
        Unknown = \\"unknown\\",
        On = \\"on\\",
        Off = \\"off\\"
    }
    export enum OperatingState {
        Unknown = \\"unknown\\",
        Normal = \\"normal\\",
        Stopped = \\"stopped\\",
        Idle = \\"idle\\"
    }
    export enum HealthState {
        Unknown = \\"unknown\\",
        Good = \\"good\\",
        Faulty = \\"faulty\\",
        Erroring = \\"erroring\\"
    }
    export enum Role {
        Admin = \\"admin\\",
        User = \\"user\\",
        Candidate = \\"candidate\\"
    }
    export enum TokenType {
        Bearer = \\"bearer\\",
        Mac = \\"mac\\",
        Unknown = \\"\\\\uD83D\\\\uDC95-\\\\u2705\\"
    }
    export enum Error {
        InvalidRequest = \\"invalid_request\\",
        InvalidClient = \\"invalid_client\\",
        InvalidGrant = \\"invalid_grant\\",
        UnauthorizedClient = \\"unauthorized_client\\",
        UnsupportedGrantType = \\"unsupported_grant_type\\",
        InvalidScope = \\"invalid_scope\\"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json 1`] = `
"declare namespace API {
    export namespace UpdatePet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = Responses.$400 | Responses.$404 | Responses.$405;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $400 = Components.Responses.updatePetResponse400<400>;
            export type $404 = Components.Responses.updatePetResponse404<404>;
            export type $405 = Components.Responses.updatePetResponse405<405>;
        }
    }
    export namespace AddPet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = Responses.$405;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $405 = Components.Responses.addPetResponse405<405>;
        }
    }
    export namespace FindPetsByStatus {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly status: Parameters.Status;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByStatusResponse200<200>;
            export type $400 = Components.Responses.findPetsByStatusResponse400<400>;
        }
        export namespace Parameters {
            export type Status = Components.Parameters.FindPetsByStatus0;
        }
    }
    export namespace FindPetsByTags {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly tags: Parameters.Tags;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByTagsResponse200<200>;
            export type $400 = Components.Responses.findPetsByTagsResponse400<400>;
        }
        export namespace Parameters {
            export type Tags = Components.Parameters.FindPetsByTags0;
        }
    }
    export namespace GetPetById {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPetByIdResponse200<200>;
            export type $400 = Components.Responses.getPetByIdResponse400<400>;
            export type $404 = Components.Responses.getPetByIdResponse404<404>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.GetPetById0;
        }
    }
    export namespace UpdatePetWithForm {
        export type Body = Components.RequestBodies.UpdatePetWithFormRequestBody;
        export type Output = Responses.$405;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $405 = Components.Responses.updatePetWithFormResponse405<405>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.UpdatePetWithForm0;
        }
    }
    export namespace DeletePet {
        export type Output = Responses.$400;
        export type Input = {
            readonly apiKey?: Parameters.ApiKey;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deletePetResponse400<400>;
        }
        export namespace Parameters {
            export type ApiKey = Components.Parameters.DeletePet0;
            export type PetId = Components.Parameters.DeletePet1;
        }
    }
    export namespace UploadFile {
        export type Body = Components.RequestBodies.UploadFileRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.uploadFileResponse200<200>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.UploadFile0;
        }
    }
    export namespace GetInventory {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getInventoryResponse200<200>;
        }
    }
    export namespace PlaceOrder {
        export type Body = Components.RequestBodies.PlaceOrderRequestBody;
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.placeOrderResponse200<200>;
            export type $400 = Components.Responses.placeOrderResponse400<400>;
        }
    }
    export namespace GetOrderById {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrderByIdResponse200<200>;
            export type $400 = Components.Responses.getOrderByIdResponse400<400>;
            export type $404 = Components.Responses.getOrderByIdResponse404<404>;
        }
        export namespace Parameters {
            export type OrderId = Components.Parameters.GetOrderById0;
        }
    }
    export namespace DeleteOrder {
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deleteOrderResponse400<400>;
            export type $404 = Components.Responses.deleteOrderResponse404<404>;
        }
        export namespace Parameters {
            export type OrderId = Components.Parameters.DeleteOrder0;
        }
    }
    export namespace CreateUser {
        export type Body = Components.RequestBodies.CreateUserRequestBody;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUserResponsedefault<number>;
        }
    }
    export namespace CreateUsersWithArrayInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUsersWithArrayInputResponsedefault<number>;
        }
    }
    export namespace CreateUsersWithListInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUsersWithListInputResponsedefault<number>;
        }
    }
    export namespace LoginUser {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly username: Parameters.Username;
            readonly password: Parameters.Password;
        };
        export namespace Responses {
            export type $200 = Components.Responses.loginUserResponse200<200>;
            export type $400 = Components.Responses.loginUserResponse400<400>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.LoginUser0;
            export type Password = Components.Parameters.LoginUser1;
        }
    }
    export namespace LogoutUser {
        export type Output = Responses.$default;
        export type Input = {};
        export namespace Responses {
            export type $default = Components.Responses.logoutUserResponsedefault<number>;
        }
    }
    export namespace GetUserByName {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserByNameResponse200<200>;
            export type $400 = Components.Responses.getUserByNameResponse400<400>;
            export type $404 = Components.Responses.getUserByNameResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.GetUserByName0;
        }
    }
    export namespace UpdateUser {
        export type Body = Components.RequestBodies.UpdateUserRequestBody;
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly body: Body;
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $400 = Components.Responses.updateUserResponse400<400>;
            export type $404 = Components.Responses.updateUserResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.UpdateUser0;
        }
    }
    export namespace DeleteUser {
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deleteUserResponse400<400>;
            export type $404 = Components.Responses.deleteUserResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.DeleteUser0;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type UserArray = Components.Schemas.RequestBodiesUserArrayBody0;
        export type Pet = Components.Schemas.Pet | Components.Schemas.Pet;
        export type UpdatePetWithFormRequestBody = Components.Schemas.Body;
        export type UploadFileRequestBody = Components.Schemas.Body1;
        export type PlaceOrderRequestBody = Components.Schemas.Order;
        export type CreateUserRequestBody = Components.Schemas.User;
        export type UpdateUserRequestBody = Components.Schemas.User;
    }
    export namespace Parameters {
        export type GetPetById0 = NonNullable<number>;
        export type UpdatePetWithForm0 = NonNullable<number>;
        export type DeletePet0 = NonNullable<string>;
        export type DeletePet1 = NonNullable<number>;
        export type UploadFile0 = NonNullable<number>;
        export type GetOrderById0 = NonNullable<number>;
        export type DeleteOrder0 = NonNullable<string>;
        export type LoginUser0 = NonNullable<string>;
        export type LoginUser1 = NonNullable<string>;
        export type GetUserByName0 = NonNullable<string>;
        export type UpdateUser0 = NonNullable<string>;
        export type DeleteUser0 = NonNullable<string>;
        export type FindPetsByStatus0 = NonNullable<(\\"available\\" | \\"pending\\" | \\"sold\\")[]>;
        export type FindPetsByTags0 = NonNullable<NonNullable<string>[]>;
    }
    export namespace Responses {
        type updatePetResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type updatePetResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type updatePetResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type addPetResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type findPetsByStatusResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type findPetsByTagsResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getPetByIdResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getPetByIdResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type updatePetWithFormResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type deletePetResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type placeOrderResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getOrderByIdResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getOrderByIdResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type deleteOrderResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type deleteOrderResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type createUserResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type createUsersWithArrayInputResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type createUsersWithListInputResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type loginUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type logoutUserResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getUserByNameResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getUserByNameResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type updateUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type updateUserResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type deleteUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type deleteUserResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type findPetsByStatusResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByStatusResponse200Body0 | Components.Schemas.ResponsesfindPetsByStatusResponse200Body1;
        };
        type findPetsByTagsResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByTagsResponse200Body0 | Components.Schemas.ResponsesfindPetsByTagsResponse200Body1;
        };
        type getPetByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Pet | Components.Schemas.Pet;
        };
        type uploadFileResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApiResponse;
        };
        type getInventoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetInventoryResponse200Body0;
        };
        type placeOrderResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        type getOrderByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        type getUserByNameResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.User | Components.Schemas.User;
        };
        type loginUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers: {
                readonly \\"x-rate-limit\\": Components.Headers.LoginUserResponse200HeadersXRateLimit;
                readonly \\"x-expires-after\\"?: Components.Headers.LoginUserResponse200HeadersXExpiresAfter;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesloginUserResponse200Body0 | Components.Schemas.ResponsesloginUserResponse200Body1;
        };
    }
    export namespace Headers {
        export type LoginUserResponse200HeadersXRateLimit = NonNullable<number>;
        export type LoginUserResponse200HeadersXExpiresAfter = NonNullable<string>;
    }
    export namespace Schemas {
        export type RequestBodiesUserArrayBody0 = NonNullable<Components.Schemas.User[]>;
        export type Pet = NonNullable<{
            id?: NonNullable<number>;
            category?: Components.Schemas.Category;
            name: NonNullable<string>;
            photoUrls: NonNullable<NonNullable<string>[]>;
            tags?: NonNullable<Components.Schemas.Tag[]>;
            status?: Enums.PetStatusInTheStore;
        }>;
        export type Body = NonNullable<{
            name?: NonNullable<string>;
            status?: NonNullable<string>;
        }>;
        export type Body1 = NonNullable<{
            additionalMetadata?: NonNullable<string>;
            file?: NonNullable<string>;
        }>;
        export type Order = NonNullable<{
            id?: NonNullable<number>;
            petId?: NonNullable<number>;
            quantity?: NonNullable<number>;
            shipDate?: NonNullable<string>;
            status?: Enums.OrderStatus;
            complete?: NonNullable<boolean>;
        }>;
        export type User = NonNullable<{
            id?: NonNullable<number>;
            username?: NonNullable<string>;
            firstName?: NonNullable<string>;
            lastName?: NonNullable<string>;
            email?: NonNullable<string>;
            password?: NonNullable<string>;
            phone?: NonNullable<string>;
            userStatus?: NonNullable<number>;
        }>;
        export type ResponsesfindPetsByStatusResponse200Body0 = NonNullable<Components.Schemas.Pet[]>;
        export type ResponsesfindPetsByStatusResponse200Body1 = NonNullable<Components.Schemas.Pet[]>;
        export type ResponsesfindPetsByTagsResponse200Body0 = NonNullable<Components.Schemas.Pet[]>;
        export type ResponsesfindPetsByTagsResponse200Body1 = NonNullable<Components.Schemas.Pet[]>;
        export type ApiResponse = NonNullable<{
            code?: NonNullable<number>;
            type?: NonNullable<string>;
            message?: NonNullable<string>;
        }>;
        export type ResponsesgetInventoryResponse200Body0 = NonNullable<{
            [pattern: string]: unknown;
        }>;
        export type ResponsesloginUserResponse200Body0 = NonNullable<string>;
        export type ResponsesloginUserResponse200Body1 = NonNullable<string>;
        export type Category = NonNullable<{
            id?: NonNullable<number>;
            name?: NonNullable<string>;
        }>;
        export type Tag = NonNullable<{
            id?: NonNullable<number>;
            name?: NonNullable<string>;
        }>;
    }
}
declare namespace Enums {
    export enum PetStatusInTheStore {
        Available = \\"available\\",
        Pending = \\"pending\\",
        Sold = \\"sold\\"
    }
    export enum OrderStatus {
        Placed = \\"placed\\",
        Approved = \\"approved\\",
        Delivered = \\"delivered\\"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace API {
    export namespace UpdatePet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
        };
    }
    export namespace AddPet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
        };
    }
    export namespace FindPetsByStatus {
        export type Output = Responses.$200;
        export type Input = {
            readonly status: Parameters.Status;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByStatusResponse200<200>;
        }
        export namespace Parameters {
            export type Status = Components.Parameters.FindPetsByStatus0;
        }
    }
    export namespace FindPetsByTags {
        export type Output = Responses.$200;
        export type Input = {
            readonly tags: Parameters.Tags;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByTagsResponse200<200>;
        }
        export namespace Parameters {
            export type Tags = Components.Parameters.FindPetsByTags0;
        }
    }
    export namespace GetPetById {
        export type Output = Responses.$200;
        export type Input = {
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPetByIdResponse200<200>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.GetPetById0;
        }
    }
    export namespace UpdatePetWithForm {
        export type Body = Components.RequestBodies.UpdatePetWithFormRequestBody;
        export type Output = unknown;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Parameters {
            export type PetId = Components.Parameters.UpdatePetWithForm0;
        }
    }
    export namespace DeletePet {
        export type Output = unknown;
        export type Input = {
            readonly apiKey?: Parameters.ApiKey;
            readonly petId: Parameters.PetId;
        };
        export namespace Parameters {
            export type ApiKey = Components.Parameters.DeletePet0;
            export type PetId = Components.Parameters.DeletePet1;
        }
    }
    export namespace UploadFile {
        export type Body = Components.RequestBodies.UploadFileRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.uploadFileResponse200<200>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.UploadFile0;
        }
    }
    export namespace GetInventory {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getInventoryResponse200<200>;
        }
    }
    export namespace PlaceOrder {
        export type Body = Components.RequestBodies.PlaceOrderRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.placeOrderResponse200<200>;
        }
    }
    export namespace GetOrderById {
        export type Output = Responses.$200;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrderByIdResponse200<200>;
        }
        export namespace Parameters {
            export type OrderId = Components.Parameters.GetOrderById0;
        }
    }
    export namespace DeleteOrder {
        export type Output = unknown;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Parameters {
            export type OrderId = Components.Parameters.DeleteOrder0;
        }
    }
    export namespace CreateUser {
        export type Body = Components.RequestBodies.CreateUserRequestBody;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
        };
    }
    export namespace CreateUsersWithArrayInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
        };
    }
    export namespace CreateUsersWithListInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
        };
    }
    export namespace LoginUser {
        export type Output = Responses.$200;
        export type Input = {
            readonly username: Parameters.Username;
            readonly password: Parameters.Password;
        };
        export namespace Responses {
            export type $200 = Components.Responses.loginUserResponse200<200>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.LoginUser0;
            export type Password = Components.Parameters.LoginUser1;
        }
    }
    export namespace LogoutUser {
        export type Output = unknown;
        export type Input = {};
    }
    export namespace GetUserByName {
        export type Output = Responses.$200;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserByNameResponse200<200>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.GetUserByName0;
        }
    }
    export namespace UpdateUser {
        export type Body = Components.RequestBodies.UpdateUserRequestBody;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
            readonly username: Parameters.Username;
        };
        export namespace Parameters {
            export type Username = Components.Parameters.UpdateUser0;
        }
    }
    export namespace DeleteUser {
        export type Output = unknown;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Parameters {
            export type Username = Components.Parameters.DeleteUser0;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type UserArray = Components.Schemas.RequestBodiesUserArrayBody0;
        export type Pet = Components.Schemas.Pet | Components.Schemas.Pet;
        export type UpdatePetWithFormRequestBody = Components.Schemas.Body;
        export type UploadFileRequestBody = Components.Schemas.Body1;
        export type PlaceOrderRequestBody = Components.Schemas.Order;
        export type CreateUserRequestBody = Components.Schemas.User;
        export type UpdateUserRequestBody = Components.Schemas.User;
    }
    export namespace Parameters {
        export type GetPetById0 = NonNullable<number>;
        export type UpdatePetWithForm0 = NonNullable<number>;
        export type DeletePet0 = NonNullable<string>;
        export type DeletePet1 = NonNullable<number>;
        export type UploadFile0 = NonNullable<number>;
        export type GetOrderById0 = NonNullable<number>;
        export type DeleteOrder0 = NonNullable<string>;
        export type LoginUser0 = NonNullable<string>;
        export type LoginUser1 = NonNullable<string>;
        export type GetUserByName0 = NonNullable<string>;
        export type UpdateUser0 = NonNullable<string>;
        export type DeleteUser0 = NonNullable<string>;
        export type FindPetsByStatus0 = NonNullable<(\\"available\\" | \\"pending\\" | \\"sold\\")[]>;
        export type FindPetsByTags0 = NonNullable<NonNullable<string>[]>;
    }
    export namespace Responses {
        type findPetsByStatusResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByStatusResponse200Body0 | Components.Schemas.ResponsesfindPetsByStatusResponse200Body1;
        };
        type findPetsByTagsResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByTagsResponse200Body0 | Components.Schemas.ResponsesfindPetsByTagsResponse200Body1;
        };
        type getPetByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Pet | Components.Schemas.Pet;
        };
        type uploadFileResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApiResponse;
        };
        type getInventoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetInventoryResponse200Body0;
        };
        type placeOrderResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        type getOrderByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        type getUserByNameResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.User | Components.Schemas.User;
        };
        type loginUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers: {
                readonly \\"x-rate-limit\\": Components.Headers.LoginUserResponse200HeadersXRateLimit;
                readonly \\"x-expires-after\\"?: Components.Headers.LoginUserResponse200HeadersXExpiresAfter;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesloginUserResponse200Body0 | Components.Schemas.ResponsesloginUserResponse200Body1;
        };
    }
    export namespace Headers {
        export type LoginUserResponse200HeadersXRateLimit = NonNullable<number>;
        export type LoginUserResponse200HeadersXExpiresAfter = NonNullable<string>;
    }
    export namespace Schemas {
        export type RequestBodiesUserArrayBody0 = NonNullable<Components.Schemas.User[]>;
        export type Pet = NonNullable<{
            id?: NonNullable<number>;
            category?: Components.Schemas.Category;
            name: NonNullable<string>;
            photoUrls: NonNullable<NonNullable<string>[]>;
            tags?: NonNullable<Components.Schemas.Tag[]>;
            status?: Enums.PetStatusInTheStore;
        }>;
        export type Body = NonNullable<{
            name?: NonNullable<string>;
            status?: NonNullable<string>;
        }>;
        export type Body1 = NonNullable<{
            additionalMetadata?: NonNullable<string>;
            file?: NonNullable<string>;
        }>;
        export type Order = NonNullable<{
            id?: NonNullable<number>;
            petId?: NonNullable<number>;
            quantity?: NonNullable<number>;
            shipDate?: NonNullable<string>;
            status?: Enums.OrderStatus;
            complete?: NonNullable<boolean>;
        }>;
        export type User = NonNullable<{
            id?: NonNullable<number>;
            username?: NonNullable<string>;
            firstName?: NonNullable<string>;
            lastName?: NonNullable<string>;
            email?: NonNullable<string>;
            password?: NonNullable<string>;
            phone?: NonNullable<string>;
            userStatus?: NonNullable<number>;
        }>;
        export type ResponsesfindPetsByStatusResponse200Body0 = NonNullable<Components.Schemas.Pet[]>;
        export type ResponsesfindPetsByStatusResponse200Body1 = NonNullable<Components.Schemas.Pet[]>;
        export type ResponsesfindPetsByTagsResponse200Body0 = NonNullable<Components.Schemas.Pet[]>;
        export type ResponsesfindPetsByTagsResponse200Body1 = NonNullable<Components.Schemas.Pet[]>;
        export type ApiResponse = NonNullable<{
            code?: NonNullable<number>;
            type?: NonNullable<string>;
            message?: NonNullable<string>;
        }>;
        export type ResponsesgetInventoryResponse200Body0 = NonNullable<{
            [pattern: string]: unknown;
        }>;
        export type ResponsesloginUserResponse200Body0 = NonNullable<string>;
        export type ResponsesloginUserResponse200Body1 = NonNullable<string>;
        export type Category = NonNullable<{
            id?: NonNullable<number>;
            name?: NonNullable<string>;
        }>;
        export type Tag = NonNullable<{
            id?: NonNullable<number>;
            name?: NonNullable<string>;
        }>;
    }
}
declare namespace Enums {
    export enum PetStatusInTheStore {
        Available = \\"available\\",
        Pending = \\"pending\\",
        Sold = \\"sold\\"
    }
    export enum OrderStatus {
        Placed = \\"placed\\",
        Approved = \\"approved\\",
        Delivered = \\"delivered\\"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json and generateUnusedSchemas option to true 1`] = `
"declare namespace AnotherAPI {
    export namespace UpdatePet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = Responses.$400 | Responses.$404 | Responses.$405;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $400 = Components.Responses.updatePetResponse400<400>;
            export type $404 = Components.Responses.updatePetResponse404<404>;
            export type $405 = Components.Responses.updatePetResponse405<405>;
        }
    }
    export namespace AddPet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = Responses.$405;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $405 = Components.Responses.addPetResponse405<405>;
        }
    }
    export namespace FindPetsByStatus {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly status: Parameters.Status;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByStatusResponse200<200>;
            export type $400 = Components.Responses.findPetsByStatusResponse400<400>;
        }
        export namespace Parameters {
            export type Status = Components.Parameters.FindPetsByStatus0;
        }
    }
    export namespace FindPetsByTags {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly tags: Parameters.Tags;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByTagsResponse200<200>;
            export type $400 = Components.Responses.findPetsByTagsResponse400<400>;
        }
        export namespace Parameters {
            export type Tags = Components.Parameters.FindPetsByTags0;
        }
    }
    export namespace GetPetById {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPetByIdResponse200<200>;
            export type $400 = Components.Responses.getPetByIdResponse400<400>;
            export type $404 = Components.Responses.getPetByIdResponse404<404>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.GetPetById0;
        }
    }
    export namespace UpdatePetWithForm {
        export type Body = Components.RequestBodies.UpdatePetWithFormRequestBody;
        export type Output = Responses.$405;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $405 = Components.Responses.updatePetWithFormResponse405<405>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.UpdatePetWithForm0;
        }
    }
    export namespace DeletePet {
        export type Output = Responses.$400;
        export type Input = {
            readonly apiKey?: Parameters.ApiKey;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deletePetResponse400<400>;
        }
        export namespace Parameters {
            export type ApiKey = Components.Parameters.DeletePet0;
            export type PetId = Components.Parameters.DeletePet1;
        }
    }
    export namespace UploadFile {
        export type Body = Components.RequestBodies.UploadFileRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.uploadFileResponse200<200>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.UploadFile0;
        }
    }
    export namespace GetInventory {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getInventoryResponse200<200>;
        }
    }
    export namespace PlaceOrder {
        export type Body = Components.RequestBodies.PlaceOrderRequestBody;
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.placeOrderResponse200<200>;
            export type $400 = Components.Responses.placeOrderResponse400<400>;
        }
    }
    export namespace GetOrderById {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrderByIdResponse200<200>;
            export type $400 = Components.Responses.getOrderByIdResponse400<400>;
            export type $404 = Components.Responses.getOrderByIdResponse404<404>;
        }
        export namespace Parameters {
            export type OrderId = Components.Parameters.GetOrderById0;
        }
    }
    export namespace DeleteOrder {
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deleteOrderResponse400<400>;
            export type $404 = Components.Responses.deleteOrderResponse404<404>;
        }
        export namespace Parameters {
            export type OrderId = Components.Parameters.DeleteOrder0;
        }
    }
    export namespace CreateUser {
        export type Body = Components.RequestBodies.CreateUserRequestBody;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUserResponsedefault<number>;
        }
    }
    export namespace CreateUsersWithArrayInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUsersWithArrayInputResponsedefault<number>;
        }
    }
    export namespace CreateUsersWithListInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUsersWithListInputResponsedefault<number>;
        }
    }
    export namespace LoginUser {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly username: Parameters.Username;
            readonly password: Parameters.Password;
        };
        export namespace Responses {
            export type $200 = Components.Responses.loginUserResponse200<200>;
            export type $400 = Components.Responses.loginUserResponse400<400>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.LoginUser0;
            export type Password = Components.Parameters.LoginUser1;
        }
    }
    export namespace LogoutUser {
        export type Output = Responses.$default;
        export type Input = {};
        export namespace Responses {
            export type $default = Components.Responses.logoutUserResponsedefault<number>;
        }
    }
    export namespace GetUserByName {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserByNameResponse200<200>;
            export type $400 = Components.Responses.getUserByNameResponse400<400>;
            export type $404 = Components.Responses.getUserByNameResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.GetUserByName0;
        }
    }
    export namespace UpdateUser {
        export type Body = Components.RequestBodies.UpdateUserRequestBody;
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly body: Body;
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $400 = Components.Responses.updateUserResponse400<400>;
            export type $404 = Components.Responses.updateUserResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.UpdateUser0;
        }
    }
    export namespace DeleteUser {
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deleteUserResponse400<400>;
            export type $404 = Components.Responses.deleteUserResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.DeleteUser0;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type UserArray = Components.Schemas.RequestBodiesUserArrayBody0;
        export type Pet = Components.Schemas.Pet | Components.Schemas.Pet;
        export type UpdatePetWithFormRequestBody = Components.Schemas.Body;
        export type UploadFileRequestBody = Components.Schemas.Body1;
        export type PlaceOrderRequestBody = Components.Schemas.Order;
        export type CreateUserRequestBody = Components.Schemas.User;
        export type UpdateUserRequestBody = Components.Schemas.User;
    }
    export namespace Parameters {
        export type GetPetById0 = NonNullable<number>;
        export type UpdatePetWithForm0 = NonNullable<number>;
        export type DeletePet0 = NonNullable<string>;
        export type DeletePet1 = NonNullable<number>;
        export type UploadFile0 = NonNullable<number>;
        export type GetOrderById0 = NonNullable<number>;
        export type DeleteOrder0 = NonNullable<string>;
        export type LoginUser0 = NonNullable<string>;
        export type LoginUser1 = NonNullable<string>;
        export type GetUserByName0 = NonNullable<string>;
        export type UpdateUser0 = NonNullable<string>;
        export type DeleteUser0 = NonNullable<string>;
        export type FindPetsByStatus0 = NonNullable<(\\"available\\" | \\"pending\\" | \\"sold\\")[]>;
        export type FindPetsByTags0 = NonNullable<NonNullable<string>[]>;
    }
    export namespace Responses {
        type updatePetResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type updatePetResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type updatePetResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type addPetResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type findPetsByStatusResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type findPetsByTagsResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getPetByIdResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getPetByIdResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type updatePetWithFormResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type deletePetResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type placeOrderResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getOrderByIdResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getOrderByIdResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type deleteOrderResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type deleteOrderResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type createUserResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type createUsersWithArrayInputResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type createUsersWithListInputResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type loginUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type logoutUserResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getUserByNameResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getUserByNameResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type updateUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type updateUserResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type deleteUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type deleteUserResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type findPetsByStatusResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByStatusResponse200Body0 | Components.Schemas.ResponsesfindPetsByStatusResponse200Body1;
        };
        type findPetsByTagsResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByTagsResponse200Body0 | Components.Schemas.ResponsesfindPetsByTagsResponse200Body1;
        };
        type getPetByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Pet | Components.Schemas.Pet;
        };
        type uploadFileResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApiResponse;
        };
        type getInventoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetInventoryResponse200Body0;
        };
        type placeOrderResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        type getOrderByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        type getUserByNameResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.User | Components.Schemas.User;
        };
        type loginUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers: {
                readonly \\"x-rate-limit\\": Components.Headers.LoginUserResponse200HeadersXRateLimit;
                readonly \\"x-expires-after\\"?: Components.Headers.LoginUserResponse200HeadersXExpiresAfter;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesloginUserResponse200Body0 | Components.Schemas.ResponsesloginUserResponse200Body1;
        };
    }
    export namespace Headers {
        export type LoginUserResponse200HeadersXRateLimit = NonNullable<number>;
        export type LoginUserResponse200HeadersXExpiresAfter = NonNullable<string>;
    }
    export namespace Schemas {
        export type Order = NonNullable<{
            id?: NonNullable<number>;
            petId?: NonNullable<number>;
            quantity?: NonNullable<number>;
            shipDate?: NonNullable<string>;
            status?: Enums.OrderStatus;
            complete?: NonNullable<boolean>;
        }>;
        export type Category = NonNullable<{
            id?: NonNullable<number>;
            name?: NonNullable<string>;
        }>;
        export type User = NonNullable<{
            id?: NonNullable<number>;
            username?: NonNullable<string>;
            firstName?: NonNullable<string>;
            lastName?: NonNullable<string>;
            email?: NonNullable<string>;
            password?: NonNullable<string>;
            phone?: NonNullable<string>;
            userStatus?: NonNullable<number>;
        }>;
        export type Tag = NonNullable<{
            id?: NonNullable<number>;
            name?: NonNullable<string>;
        }>;
        export type Pet = NonNullable<{
            id?: NonNullable<number>;
            category?: Components.Schemas.Category;
            name: NonNullable<string>;
            photoUrls: NonNullable<NonNullable<string>[]>;
            tags?: NonNullable<Components.Schemas.Tag[]>;
            status?: Enums.PetStatusInTheStore;
        }>;
        export type ApiResponse = NonNullable<{
            code?: NonNullable<number>;
            type?: NonNullable<string>;
            message?: NonNullable<string>;
        }>;
        export type Body = NonNullable<{
            name?: NonNullable<string>;
            status?: NonNullable<string>;
        }>;
        export type Body1 = NonNullable<{
            additionalMetadata?: NonNullable<string>;
            file?: NonNullable<string>;
        }>;
        export type RequestBodiesUserArrayBody0 = NonNullable<Components.Schemas.User[]>;
        export type ResponsesfindPetsByStatusResponse200Body0 = NonNullable<Components.Schemas.Pet[]>;
        export type ResponsesfindPetsByStatusResponse200Body1 = NonNullable<Components.Schemas.Pet[]>;
        export type ResponsesfindPetsByTagsResponse200Body0 = NonNullable<Components.Schemas.Pet[]>;
        export type ResponsesfindPetsByTagsResponse200Body1 = NonNullable<Components.Schemas.Pet[]>;
        export type ResponsesgetInventoryResponse200Body0 = NonNullable<{
            [pattern: string]: unknown;
        }>;
        export type ResponsesloginUserResponse200Body0 = NonNullable<string>;
        export type ResponsesloginUserResponse200Body1 = NonNullable<string>;
    }
}
declare namespace Enums {
    export enum OrderStatus {
        Placed = \\"placed\\",
        Approved = \\"approved\\",
        Delivered = \\"delivered\\"
    }
    export enum PetStatusInTheStore {
        Available = \\"available\\",
        Pending = \\"pending\\",
        Sold = \\"sold\\"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json 1`] = `
"declare namespace API {
    export namespace GetDelay {
        export type Output = Responses.$204;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Responses {
            export type $204 = Components.Responses.getDelayResponse204<204>;
        }
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getDiagnosticResponse200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = Responses.$204;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Responses {
            export type $204 = Components.Responses.getParametersResponse204<204>;
        }
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getTimeResponse200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.PutEchoRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.putEchoResponse200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PutEchoRequestBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = NonNullable<number>;
        export type PathParam1 = NonNullable<number>;
        export type GetParameters2 = NonNullable<boolean>;
    }
    export namespace Responses {
        type getDelayResponse204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getDiagnosticResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetDiagnosticResponse200Body0;
        };
        type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        type getTimeResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        type putEchoResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
        type getParametersResponse204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly \\"x-delay-precision\\"?: Components.Headers.GetParametersResponse204HeadersXDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetParametersResponse204Body0;
        };
    }
    export namespace Headers {
        export type GetParametersResponse204HeadersXDelayPrecision = Enums.GetParametersResponse204HeadersXDelayPrecision;
    }
    export namespace Schemas {
        export type Echo = NonNullable<{
            echo: NonNullable<string>;
        }>;
        export type Strings = NonNullable<NonNullable<string>[]>;
        export type ResponsesgetDiagnosticResponse200Body0 = NonNullable<{
            transactions: NonNullable<{
                [pattern: string]: unknown;
            }>;
        }>;
        export type ResponsesgetOpenAPIResponse200Body0 = NonNullable<{}>;
        export type ResponsesgetParametersResponse204Body0 = NonNullable<{
            aHeader?: NonNullable<boolean>;
            pathParam1?: NonNullable<number>;
            pathParam2?: NonNullable<NonNullable<string>[]>;
        }>;
        export type TimeSchema = NonNullable<{
            currentDate?: NonNullable<string>;
        }>;
        export type ResponsesgetPingResponse200Body0 = NonNullable<{
            pong?: \\"pong\\";
        }>;
    }
}
declare namespace Enums {
    export enum GetParametersResponse204HeadersXDelayPrecision {
        Ns = \\"ns\\",
        Ms = \\"ms\\",
        S = \\"s\\"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace API {
    export namespace GetDelay {
        export type Output = unknown;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getDiagnosticResponse200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = unknown;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getTimeResponse200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.PutEchoRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.putEchoResponse200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PutEchoRequestBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = NonNullable<number>;
        export type PathParam1 = NonNullable<number>;
        export type GetParameters2 = NonNullable<boolean>;
    }
    export namespace Responses {
        type getDiagnosticResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetDiagnosticResponse200Body0;
        };
        type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        type getTimeResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        type putEchoResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
    }
    export namespace Schemas {
        export type Echo = NonNullable<{
            echo: NonNullable<string>;
        }>;
        export type Strings = NonNullable<NonNullable<string>[]>;
        export type ResponsesgetDiagnosticResponse200Body0 = NonNullable<{
            transactions: NonNullable<{
                [pattern: string]: unknown;
            }>;
        }>;
        export type ResponsesgetOpenAPIResponse200Body0 = NonNullable<{}>;
        export type TimeSchema = NonNullable<{
            currentDate?: NonNullable<string>;
        }>;
        export type ResponsesgetPingResponse200Body0 = NonNullable<{
            pong?: \\"pong\\";
        }>;
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json and generateUnusedSchemas option to true 1`] = `
"declare namespace AnotherAPI {
    export namespace GetDelay {
        export type Output = Responses.$204;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Responses {
            export type $204 = Components.Responses.getDelayResponse204<204>;
        }
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getDiagnosticResponse200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = Responses.$204;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Responses {
            export type $204 = Components.Responses.getParametersResponse204<204>;
        }
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getTimeResponse200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.PutEchoRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.putEchoResponse200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PutEchoRequestBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = NonNullable<number>;
        export type PathParam1 = NonNullable<number>;
        export type GetParameters2 = NonNullable<boolean>;
    }
    export namespace Responses {
        type getDelayResponse204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type getDiagnosticResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetDiagnosticResponse200Body0;
        };
        type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        type getTimeResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        type putEchoResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
        type getParametersResponse204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly \\"x-delay-precision\\"?: Components.Headers.GetParametersResponse204HeadersXDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetParametersResponse204Body0;
        };
    }
    export namespace Headers {
        export type GetParametersResponse204HeadersXDelayPrecision = Enums.GetParametersResponse204HeadersXDelayPrecision;
    }
    export namespace Schemas {
        export type TimeSchema = NonNullable<{
            currentDate?: NonNullable<string>;
        }>;
        export type Echo = NonNullable<{
            echo: NonNullable<string>;
        }>;
        export type Strings = NonNullable<NonNullable<string>[]>;
        export type ResponsesgetDiagnosticResponse200Body0 = NonNullable<{
            transactions: NonNullable<{
                [pattern: string]: unknown;
            }>;
        }>;
        export type ResponsesgetOpenAPIResponse200Body0 = NonNullable<{}>;
        export type ResponsesgetParametersResponse204Body0 = NonNullable<{
            aHeader?: NonNullable<boolean>;
            pathParam1?: NonNullable<number>;
            pathParam2?: NonNullable<NonNullable<string>[]>;
        }>;
        export type ResponsesgetPingResponse200Body0 = NonNullable<{
            pong?: \\"pong\\";
        }>;
    }
}
declare namespace Enums {
    export enum GetParametersResponse204HeadersXDelayPrecision {
        Ns = \\"ns\\",
        Ms = \\"ms\\",
        S = \\"s\\"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json 1`] = `
"declare namespace API {
    export namespace GetDelay {
        export type Output = Responses.$204;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Responses {
            export type $204 = Components.Responses.Delay204<204>;
        }
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Diagnostic200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.OpenAPI200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = Responses.$204;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Responses {
            export type $204 = Components.Responses.Params204<204>;
        }
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Time200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.EchoBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.Echo200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Ping200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type EchoBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = NonNullable<number>;
        export type PathParam1 = NonNullable<number>;
        export type GetParameters2 = NonNullable<boolean>;
    }
    export namespace Responses {
        type Delay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type Diagnostic200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnostic200Body0;
        };
        type OpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesOpenAPI200Body0;
        };
        type Time200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        type Echo200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        type Ping200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPing200Body0;
        };
        type Params204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly \\"x-delay-precision\\"?: Components.Headers.XDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesParams204Body0;
        };
    }
    export namespace Headers {
        export type XDelayPrecision = Enums.XDelayPrecision;
    }
    export namespace Schemas {
        export type Echo = NonNullable<{
            echo: NonNullable<string>;
        }>;
        export type Strings = NonNullable<NonNullable<string>[]>;
        export type ResponsesDiagnostic200Body0 = NonNullable<{
            transactions: NonNullable<{
                [pattern: string]: unknown;
            }>;
        }>;
        export type ResponsesOpenAPI200Body0 = NonNullable<{}>;
        export type ResponsesParams204Body0 = NonNullable<{
            aHeader?: NonNullable<boolean>;
            pathParam1?: NonNullable<number>;
            pathParam2?: NonNullable<NonNullable<string>[]>;
        }>;
        export type TimeSchema = NonNullable<{
            currentDate?: NonNullable<string>;
        }>;
        export type ResponsesPing200Body0 = NonNullable<{
            pong?: \\"pong\\";
        }>;
    }
}
declare namespace Enums {
    export enum XDelayPrecision {
        Ns = \\"ns\\",
        Ms = \\"ms\\",
        S = \\"s\\"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace API {
    export namespace GetDelay {
        export type Output = unknown;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Diagnostic200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.OpenAPI200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = unknown;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Time200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.EchoBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.Echo200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Ping200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type EchoBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = NonNullable<number>;
        export type PathParam1 = NonNullable<number>;
        export type GetParameters2 = NonNullable<boolean>;
    }
    export namespace Responses {
        type Delay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type Diagnostic200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnostic200Body0;
        };
        type OpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesOpenAPI200Body0;
        };
        type Time200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        type Echo200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        type Ping200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPing200Body0;
        };
        type Params204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly \\"x-delay-precision\\"?: Components.Headers.XDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesParams204Body0;
        };
    }
    export namespace Headers {
        export type XDelayPrecision = Enums.XDelayPrecision;
    }
    export namespace Schemas {
        export type Echo = NonNullable<{
            echo: NonNullable<string>;
        }>;
        export type Strings = NonNullable<NonNullable<string>[]>;
        export type ResponsesDiagnostic200Body0 = NonNullable<{
            transactions: NonNullable<{
                [pattern: string]: unknown;
            }>;
        }>;
        export type ResponsesOpenAPI200Body0 = NonNullable<{}>;
        export type ResponsesParams204Body0 = NonNullable<{
            aHeader?: NonNullable<boolean>;
            pathParam1?: NonNullable<number>;
            pathParam2?: NonNullable<NonNullable<string>[]>;
        }>;
        export type TimeSchema = NonNullable<{
            currentDate?: NonNullable<string>;
        }>;
        export type ResponsesPing200Body0 = NonNullable<{
            pong?: \\"pong\\";
        }>;
    }
}
declare namespace Enums {
    export enum XDelayPrecision {
        Ns = \\"ns\\",
        Ms = \\"ms\\",
        S = \\"s\\"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json and generateUnusedSchemas option to true 1`] = `
"declare namespace AnotherAPI {
    export namespace GetDelay {
        export type Output = Responses.$204;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Responses {
            export type $204 = Components.Responses.Delay204<204>;
        }
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Diagnostic200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.OpenAPI200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = Responses.$204;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Responses {
            export type $204 = Components.Responses.Params204<204>;
        }
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Time200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.EchoBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.Echo200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Ping200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type EchoBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = NonNullable<number>;
        export type PathParam1 = NonNullable<number>;
        export type GetParameters2 = NonNullable<boolean>;
    }
    export namespace Responses {
        type Delay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: NonNullable<unknown>;
        };
        type Diagnostic200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnostic200Body0;
        };
        type OpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesOpenAPI200Body0;
        };
        type Time200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        type Echo200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        type Ping200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPing200Body0;
        };
        type Params204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly \\"x-delay-precision\\"?: Components.Headers.XDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesParams204Body0;
        };
    }
    export namespace Headers {
        export type XDelayPrecision = Enums.XDelayPrecision;
    }
    export namespace Schemas {
        export type TimeSchema = NonNullable<{
            currentDate?: NonNullable<string>;
        }>;
        export type Echo = NonNullable<{
            echo: NonNullable<string>;
        }>;
        export type Strings = NonNullable<NonNullable<string>[]>;
        export type ResponsesDiagnostic200Body0 = NonNullable<{
            transactions: NonNullable<{
                [pattern: string]: unknown;
            }>;
        }>;
        export type ResponsesOpenAPI200Body0 = NonNullable<{}>;
        export type ResponsesParams204Body0 = NonNullable<{
            aHeader?: NonNullable<boolean>;
            pathParam1?: NonNullable<number>;
            pathParam2?: NonNullable<NonNullable<string>[]>;
        }>;
        export type ResponsesPing200Body0 = NonNullable<{
            pong?: \\"pong\\";
        }>;
    }
}
declare namespace Enums {
    export enum XDelayPrecision {
        Ns = \\"ns\\",
        Ms = \\"ms\\",
        S = \\"s\\"
    }
}"
`;
